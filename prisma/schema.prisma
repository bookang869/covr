// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma turns this file into SQL migrations and a type-safe PrismaClient

// schema.prisma has 3 main sections:
// 1. Generators -> tell Prisma how to generate the Prisma client (what to output)
generator client {
  provider = "prisma-client-js" // Generate a TS client library sos I can do import { PrismaClient } from '@prisma/client' in my code.
}

// 2. Data sources -> tell Prisma which DB to connect to and how
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3. Data model -> describe your tables (called models), enums, and relationships
// FieldName | FieldType | Attirbutes (@)

// Auth.js (NextAuth) models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // covr relationships
  memberships Membership[]
  auditLogs   AuditLog[]   @relation("AuditActor")
  Vendor      Vendor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Multi-tenant models
enum Role {
  ADMIN
  ANALYST
  VIEWER
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
  vendors     Vendor[]
  auditLogs   AuditLog[]   @relation("AuditOrg")
}

model Membership {
  id     String @id @default(cuid())
  orgId  String
  userId String
  role   Role   @default(VIEWER)

  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
}

// Early domain models
model Vendor {
  id              String   @id @default(cuid())
  orgId           String
  name            String
  domain          String?
  ownerId         String?
  riskLevel       Int      @default(0) // simple number for now
  dataSensitivity Int      @default(0) // simple number for now
  status          String   @default("ACTIVE")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  owner User?        @relation(fields: [ownerId], references: [id])

  // helpful indexes
  @@index([orgId], map: "idx_vendor_org")
}

model AuditLog {
  id         String   @id @default(cuid())
  orgId      String
  actorId    String?
  entityType String
  entityId   String
  action     String
  before     Json?
  after      Json?
  createdAt  DateTime @default(now())

  org   Organization @relation("AuditOrg", fields: [orgId], references: [id], onDelete: Cascade)
  actor User?        @relation("AuditActor", fields: [actorId], references: [id])
}
