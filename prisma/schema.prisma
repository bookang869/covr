generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  auditLogs     AuditLog[]   @relation("AuditActor")
  memberships   Membership[]
  sessions      Session[]
  Vendor        Vendor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  auditLogs   AuditLog[]   @relation("AuditOrg")
  memberships Membership[]
  vendors     Vendor[]
}

model Membership {
  id     String       @id @default(cuid())
  orgId  String
  userId String
  role   Role         @default(VIEWER)
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
}

model Vendor {
  id              String       @id @default(cuid())
  orgId           String
  name            String
  domain          String?
  ownerId         String?
  riskLevel       Int          @default(0)
  dataSensitivity Int          @default(0)
  status          String       @default("ACTIVE")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  org             Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  owner           User?        @relation(fields: [ownerId], references: [id])

  @@index([orgId], map: "idx_vendor_org")
}

model AuditLog {
  id         String       @id @default(cuid())
  orgId      String
  actorId    String?
  entityType String
  entityId   String
  action     String
  before     Json?
  after      Json?
  createdAt  DateTime     @default(now())
  actor      User?        @relation("AuditActor", fields: [actorId], references: [id])
  org        Organization @relation("AuditOrg", fields: [orgId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  ANALYST
  VIEWER
}
